package com.github.tkawachi

import sbt._
import sbt.Keys._
import java.io.PrintWriter

object SbtLock extends Plugin {
  val lockFile = settingKey[File]("A version locking file.")
  val lock = taskKey[Unit]("Create a version locking file.")
  val unlock = taskKey[Unit]("Remove a version locking file.")

  case class Artifact(organization: String, name: String) {
    def sbtString(revision: String) =
      Seq(organization, name, revision).map("\"" + _ + "\"").mkString(" % ")
  }

  override val projectSettings = Seq(
    lockFile := baseDirectory {_ / "lock.sbt"}.value,
    lock := doLock(update.value.allModules, lockFile.value),
    unlock := lockFile.value.delete()
  )

  def doLock(allModules: Seq[ModuleID], outputFile: File): Unit = {
    val revisionsMap: Map[Artifact, Set[String]] =
      allModules.groupBy { m =>
        Artifact(m.organization, m.name)
      }.mapValues(_.map(_.revision).toSet)

    val moduleLines = revisionsMap.map { case (artifact, revisions) =>
      artifact.sbtString(chooseRevision(artifact, revisions))
    }.toSeq.sorted.mkString(",\n  ")
    val dependencyOverrides =
      "// This file is auto generated by sbt-lock.\n" +
    "// https://github.com/tkawachi/sbt-lock/\n\n" +
    "dependencyOverrides ++= Set(\n  " +
    moduleLines +
    "\n)\n"

    val writer = new PrintWriter(outputFile)
    try writer.write(dependencyOverrides) finally {
      writer.close()
    }
  }

  def chooseRevision(artifact: Artifact, revisions: Set[String]): String = {
    if (revisions.size == 1) revisions.head
    else {
      println(s"Multiple version exists for $artifact: $revisions")
      val revision = latest(revisions)
      println(s"$revision is chosen.")
      revision
    }
  }

  // FIXME
  def latest(revisions: Set[String]): String = revisions.max
}
