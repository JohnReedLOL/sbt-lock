package com.github.tkawachi.sbtlock

import org.apache.maven.artifact.versioning.ComparableVersion
import sbt.{ Logger, IO, File, ModuleID }

object SbtLock {
  private[sbtlock] val DEFAULT_LOCK_FILE_NAME = "lock.sbt"

  case class Artifact(organization: String, name: String) {
    def sbtString(revision: String) =
      Seq(organization, name, revision).map("\"" + _ + "\"").mkString(" % ")
  }

  def doLock(allModules: Seq[ModuleID], outputFile: File, log: Logger): Unit = {
    val revisionsMap: Map[Artifact, Map[String, Set[String]]] =
      allModules.groupBy { m =>
        Artifact(m.organization, m.name)
      }.mapValues { modulesInArtifact =>
        modulesInArtifact.groupBy(_.revision).mapValues { modulesInRevision =>
          modulesInRevision.map(_.configurations).flatten.toSet
        }
      }

    val moduleLines = revisionsMap.map {
      case (artifact, revisions) =>
        artifact.sbtString(chooseRevision(artifact, revisions, log))
    }.toSeq.sorted.mkString(",\n  ")

    if (moduleLines.size > 0) {
      val dependencyOverrides =
        s"// This file is auto generated by sbt-lock ${BuildInfo.version}.\n" +
          "// https://github.com/tkawachi/sbt-lock/\n\n" +
          "dependencyOverrides in ThisBuild ++= Set(\n  " +
          moduleLines +
          "\n)\n"

      IO.write(outputFile, dependencyOverrides)
      log.info(s"$outputFile was created. Commit it to version control system.")
    } else {
      log.info(s"No module dependency found. Skipped to write $outputFile")
    }
  }

  def chooseRevision(artifact: Artifact, revisions: Map[String, Set[String]], log: Logger): String = {
    if (revisions.size == 1) revisions.head._1
    else {
      log.info(s"Multiple versions exist for ${artifact.organization} % ${artifact.name}:")
      val foundVersions = revisions.keys.toList.sorted.mkString(", ")
      log.info(s"  Found $foundVersions")
      val revision = latest(revisions.keys.toSet)
      log.info(s"  -> $revision is chosen.")
      revision
    }
  }

  def latest(revisions: Set[String]): String = revisions.maxBy(new ComparableVersion(_))

}
