package com.github.tkawachi

import sbt._
import sbt.Keys._
import java.io.PrintWriter

object SbtLock extends Plugin {
  val lock = taskKey[Unit]("Create a version locking file.")
  val lockFile = settingKey[File]("A version locking file.")

  case class Artifact(organization: String, name: String) {
    def sbtString(revision: String) =
      Seq(organization, name, revision).map("\"" + _ + "\"").mkString(" % ")
  }

  override val projectSettings = Seq(
    lockFile := baseDirectory {_ / "lock.sbt"}.value,
    lock := {
      val revisionsMap: Map[Artifact, Set[String]] =
        update.value.allModules.groupBy { m =>
          Artifact(m.organization, m.name)
        }.mapValues(_.map(_.revision).toSet)

      val moduleLines = revisionsMap.map { case (artifact, revisions) =>
        artifact.sbtString(latest(revisions))
      }.toSeq.sorted.mkString(",\n  ")
      val dependencyOverrides =
        "// This file is auto generated by sbt-lock.\n" +
        "// https://github.com/tkawachi/sbt-lock/\n\n" +
        "dependencyOverrides ++= Set(\n  " +
        moduleLines +
        "\n)\n"

      val writer = new PrintWriter(lockFile.value)
      try writer.write(dependencyOverrides) finally {
        writer.close()
      }
    }
  )

  // FIXME
  def latest(revisions: Set[String]): String = revisions.max
}
